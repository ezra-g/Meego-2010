<?php
// $Id: context_ui.module,v 1.13.2.48.2.1.2.12 2010/05/25 16:06:07 yhahn Exp $

/**
 * Implementation of hook_theme().
 */
function context_ui_theme() {
  $items = array();
  $items['context_ui_admin'] = array(
    'arguments' => array('form' => array()),
    'path' => drupal_get_path('module', 'context_ui') .'/theme',
    'file' => 'theme.inc',
  );
  $items['context_ui_form'] = array(
    'arguments' => array('form' => array()),
    'path' => drupal_get_path('module', 'context_ui') .'/theme',
    'template' => 'context-ui-form',
    'file' => 'theme.inc',
  );
  $items['context_ui_plugins'] = array(
    'arguments' => array('form' => array()),
    'path' => drupal_get_path('module', 'context_ui') .'/theme',
    'template' => 'context-ui-plugins',
    'file' => 'theme.inc',
  );
  $items['context_ui_editor'] = array(
    'arguments' => array('form' => array()),
    'path' => drupal_get_path('module', 'context_ui') .'/theme',
    'template' => 'context-ui-editor',
    'file' => 'theme.inc',
  );
  return $items;
}

/**
 * Implementation of hook_block().
 */
function context_ui_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks = array();
      if (module_exists('jquery_ui') && module_exists('admin')) {
        $blocks['editor'] = array('info' => t('Context editor'), 'admin' => TRUE);
      }
      if (module_exists('devel')) {
        $blocks['devel'] = array('info' => t('Context inspector'), 'admin' => TRUE);
      }
      return $blocks;
    case 'view':
      switch ($delta) {
        case 'editor':
          if (user_access('administer site configuration') && strpos($_GET['q'], 'admin/build/context') === FALSE && $contexts = context_active_contexts()) {
            return array(
              'subject' => t('Context editor'),
              'content' => drupal_get_form('context_ui_editor', $contexts),
            );
          }
          break;
        case 'devel':
          if (module_exists('devel') && $all = context_get()) {
            return array(
              'subject' => t('Context inspector'),
              'content' => kdevel_print_object($all),
            );
          }
          break;
      }
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function context_ui_menu() {
  $items['admin/build/context'] = array(
    'title' => 'Context',
    'description' => 'Associate menus, views, blocks, etc. with different contexts to structure your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_admin'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/build/context/list'] = array(
    'title' => 'List',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_admin'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/build/context/add'] = array(
    'title' => 'Add',
    'description' => 'Add a context to your site.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_form', 'add'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/build/context/import'] = array(
    'title' => 'Import',
    'description' => 'Import a context definition into your site.',
    'page callback' => 'context_ui_import_page',
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  );
  $items['admin/build/context/list/%context'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_form', 'edit', 4),
    'type' => MENU_CALLBACK,
  );
  $items['admin/build/context/list/%context/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_form', 'edit', 4),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -1,
  );
  $items['admin/build/context/list/%context/clone'] = array(
    'title' => 'Clone',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_form', 'clone', 4),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/context/list/%context/export'] = array(
    'title' => 'Export',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_export', 4),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/context/list/%context/revert'] = array(
    'title' => 'Revert',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_confirm', 'revert', 4),
    'access callback' => 'context_ui_task_access',
    'access arguments' => array(4, 'revert'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/context/list/%context/delete'] = array(
    'title' => 'Delete',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_confirm', 'delete', 4),
    'access callback' => 'context_ui_task_access',
    'access arguments' => array(4, 'delete'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/context/list/%context/disable'] = array(
    'title' => 'Disable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_confirm', 'disable', 4),
    'access callback' => 'context_ui_task_access',
    'access arguments' => array(4, 'disable'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/build/context/list/%context/enable'] = array(
    'title' => 'Enable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('context_ui_confirm', 'enable', 4),
    'access callback' => 'context_ui_task_access',
    'access arguments' => array(4, 'enable'),
    'type' => MENU_LOCAL_TASK,
  );

  // AHAH callback for block plugin.
  $items['context/ajax-block-view'] = array(
    'title' => 'Block view',
    'description' => 'AJAX callback for rendering a block.',
    'page callback' => 'context_ui_menu_plugin',
    'page arguments' => array('reaction', 'block', 'ajax'),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  foreach ($items as $path => $item) {
    $items[$path]['access callback'] = isset($items[$path]['access callback']) ? $items[$path]['access callback'] : 'user_access';
    $items[$path]['access arguments'] = isset($items[$path]['access arguments']) ? $items[$path]['access arguments'] : array('administer site configuration');
    $items[$path]['file'] = 'context_ui.admin.inc';
  }
  return $items;
}

/**
 * Router to handle plugin methods as menu callbacks.
 */
function context_ui_menu_plugin() {
  $args = func_get_args();
  if (isset($args[0], $args[1], $args[2])) {
    $type = array_shift($args);
    $key = array_shift($args);
    $method = array_shift($args);
    if ($plugin = context_get_plugin($type, $key)) {
      if (method_exists($plugin, $method)) {
        return call_user_func(array($plugin, $method), $args);
      }
    }
  }
  drupal_not_found();
  exit;
}

/**
 * Menu access callback for various tasks.
 */
function context_ui_task_access($context, $op) {
  if (!user_access('administer site configuration')) {
    return FALSE;
  }
  switch ($op) {
    case 'revert':
      return ($context->export_type & EXPORT_IN_DATABASE) && ($context->export_type & EXPORT_IN_CODE);
    case 'delete':
      return ($context->export_type & EXPORT_IN_DATABASE) && !($context->export_type & EXPORT_IN_CODE);
    case 'disable':
      return empty($context->disabled);
    case 'enable':
      return !empty($context->disabled);
  }
  return TRUE;
}

/**
 * Implementation of hook_help().
 */
function context_ui_help($path, $arg) {
  switch ($path) {
    case 'admin/build/context':
      return '<p>'.
        t('Contexts provide you with a way to organize your site using terms familiar to real human beings. You can create a set of sections like <b>"News"</b>, <b>"Projects"</b>, <b>"Staff"</b>, and associate different technical aspects of Drupal to each section. For example, the <b>"News"</b> section may be a collection of <b>Nodes</b>, <b>Views</b>, <b>Menus</b> and <b>Blocks</b>.')
        .'</p>';
      break;
  }
}

/**
 * Implementation of hook_form_alter for the admin_settings_form. Adds UI
 * element to control if empty regions are shown.
 */
function context_ui_form_admin_settings_form_alter(&$form, $form_state) {
  $form['context_ui_show_empty_regions'] = array(
    '#type' => 'checkbox',
    '#title' => t('Always show empty theme regions.'),
    '#description' => t('When checked empty regions will always be displayed, making it possible to drag blocks into those regions.'),
    '#default_value' => variable_get('context_ui_show_empty_regions', false),
    '#weight' => -1,
  );
}

/**
 * Inline context editor form.
 */
function context_ui_editor($form_state, $contexts) {
  $form = array(
    '#attributes' => array('class' => 'context-editor'),
    'editables' => array('#type' => 'markup'),
    'contexts' => array('#tree' => TRUE),
    'buttons' => array('#tree' => FALSE),
  );

  $items = array();
  $form_context = array();
  ksort($contexts);

  foreach ($contexts as $context) {
    $edit = l(t('Edit'), $_GET['q'], array('fragment' => $context->name, 'attributes' => array('class' => 'edit')));
    $done = l(t('Done'), $_GET['q'], array('fragment' => $context->name, 'attributes' => array('class' => 'done')));
    $items[] = array(
      'data' => "<div class='label'>" . (empty($context->description) ? $context->name : check_plain($context->description)) ."</div><div class='links'>{$edit} {$done}</div>",
      'class' => 'context-editable clear-block',
      'id' => "context-editable-trigger-{$context->name}",
    );
    $form_context = array(
      '#tree' => TRUE,
      '#type' => module_exists('admin') ? 'admin_panes' : NULL,
      'context' => array('#type' => 'value', '#value' => $context),
    );

    // Edit context conditions.
    foreach (array_keys(context_conditions()) as $condition) {
      $plugin = context_get_plugin('condition', $condition);
      if (method_exists($plugin, 'editor_form') && ($plugin_form = $plugin->editor_form($context))) {
        $form_context['condition'][$condition] = $plugin_form;
      }
    }
    if (count(element_children($form_context['condition']))) {
      $form_context['condition']['#title'] = t('Conditions');
      $form_context['condition']['#type'] = 'item';
      $form_context['condition']['#description'] = t('This context is active when any of the selected conditions are true.');
    }

    // Edit context reactions.
    foreach (array_keys(context_reactions()) as $reaction) {
      $plugin = context_get_plugin('reaction', $reaction);
      if (method_exists($plugin, 'editor_form') && ($plugin_form = $plugin->editor_form($context))) {
        $form_context["reaction-{$reaction}"] = $plugin_form + array('#title' => $plugin->title);
      }
    }

    // Add to main form.
    $form['contexts'][$context->name] = $form_context;
  }

  // Display editable contexts in list.
  $form['editables']['#value'] = theme('item_list', $items);

  // Buttons.
  $form['buttons']['save'] = array(
    '#type' => 'submit',
    '#value' => t('Save changes'),
    '#submit' => array('context_ui_editor_submit'),
  );
  $form['buttons']['cancel'] = array(
    '#type' => 'submit',
    '#value' => t('Cancel'),
    '#submit' => array('context_ui_editor_cancel'),
  );
  return $form;
}

/**
 * Values processor for context_ui_editor_submit().
 * Split out for reuse by overriding submit handlers.
 */
function context_ui_editor_process($values) {
  $context = $values['context'];
  foreach (array_keys(context_conditions(TRUE)) as $condition) {
    if (isset($values['condition'][$condition])) {
      $plugin = context_get_plugin('condition', $condition);
      if ($plugin && method_exists($plugin, 'editor_form_submit')) {
        $context->conditions[$condition]['values'] = $plugin->editor_form_submit($context, $values['condition'][$condition]);
      }
    }
    if (isset($context->conditions[$condition]) && context_empty($context->conditions[$condition]['values'])) {
      unset($context->conditions[$condition]);
    }
  }
  foreach (array_keys(context_reactions(TRUE)) as $reaction) {
    if (isset($values["reaction-{$reaction}"])) {
      $plugin = context_get_plugin('reaction', $reaction);
      if ($plugin && method_exists($plugin, 'editor_form_submit')) {
        $context->reactions[$reaction] = $plugin->editor_form_submit($context, $values["reaction-{$reaction}"]);
      }
    }
    if (isset($context->reactions[$reaction]) && context_empty($context->reactions[$reaction])) {
      unset($context->reactions[$reaction]);
    }
  }
  return $context;
}

/**
 * Save handler for context_block_editor().
 */
function context_ui_editor_submit(&$form, &$form_state) {
  foreach ($form_state['values']['contexts'] as $name => $values) {
    $original_conditions = $values['context']->conditions;
    $original_reactions = $values['context']->reactions;
    $context = context_ui_editor_process($values);
    if (($original_conditions !== $context->conditions) || ($original_reactions !== $context->reactions)) {
      if (context_save($context)) {
        drupal_set_message(t('Saved %title.', array(
          '%title' => (!empty($context->description) ? $context->description : $context->name)
        )));
      }
      else {
        drupal_set_message(t('Could not save context %title.', array('%title' =>  $context->name)), 'error');
      }
    }
  }
  return;
}

/**
 * Cancel handler for context_block_editor().
 */
function context_ui_editor_cancel(&$form, &$form_state) {
  return;
}
