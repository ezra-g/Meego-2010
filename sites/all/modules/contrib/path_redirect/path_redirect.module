<?php
// $Id: path_redirect.module,v 1.3.2.7.2.89 2009/12/02 10:54:25 davereid Exp $

/**
 * Implement hook_help().
 */
function path_redirect_help($path, $arg) {
  $output = '';
  switch ($path) {
    case 'admin/build/path-redirect':
    case 'admin/build/path-redirect/list':
      //$output .= '<p>' . t('Here you can set up URL redirecting for this site. Any existing or non-existing path within this site can redirect to any internal or external URL.') .'</p>';
      break;
    case 'admin/build/path-redirect/add':
    case 'admin/build/path-redirect/edit/%':
      $output .= '<p>' . t('If you need advanced redirection functionality (i.e. wildcards, etc.), you should be using a <a href="http://en.wikipedia.org/wiki/Mod_rewrite">webserver rewriting engine</a> rather than this module.') . '</p>';
      break;
  }
  return $output;
}

/**
 * Implement hook_perm().
 */
function path_redirect_perm() {
  return array(
    'administer redirects',
  );
}

/**
 * Implement hook_menu().
 */
function path_redirect_menu() {
  $items['admin/build/path-redirect'] = array(
    'title' => 'URL redirects',
    'description' => 'Redirect users from one URL to another.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_admin_redirects'),
    'access arguments' => array('administer redirects'),
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/build/path-redirect/add'] = array(
    'title' => 'Add redirect',
    'description' => 'Add a new URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/edit/%path_redirect'] = array(
    'title' => 'Edit redirect',
    'description' => 'Edit an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_edit_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/delete/%path_redirect'] = array(
    'title' => 'Delete redirect',
    'description' => 'Delete an existing URL redirect.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_delete_form', 4),
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );
  $items['admin/build/path-redirect/settings'] = array(
    'title' => 'Settings',
    'description' => 'Configure behavior for URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_settings_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/import'] = array(
  //  'title' => 'Import',
  //  'description' => 'Import URL redirects.',
  //  'page callback' => 'drupal_get_form',
  //  'page arguments' => array('path_redirect_import_form'),
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_LOCAL_TASK,
  //  'weight' => 20,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['admin/build/path-redirect/export'] = array(
    'title' => 'Export',
    'description' => 'Export URL redirects.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('path_redirect_export_form'),
    'access arguments' => array('administer redirects'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 30,
    'file' => 'path_redirect.admin.inc',
  );
  //$items['admin/build/path-redirect/export/csv'] = array(
  //  'page callback' => 'path_redirect_export_csv',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  //$items['admin/build/path-redirect/export/xml'] = array(
  //  'page callback' => 'path_redirect_export_xml',
  //  'access arguments' => array('administer redirects'),
  //  'type' => MENU_CALLBACK,
  //  'file' => 'path_redirect.admin.inc',
  //);
  $items['js/path_redirect/autocomplete_404'] = array(
    'page callback' => 'path_redirect_js_autocomplete_404',
    'access arguments' => array('administer redirects'),
    'type' => MENU_CALLBACK,
    'file' => 'path_redirect.admin.inc',
  );

  return $items;
}

/**
 * Implement hook_init().
 */
function path_redirect_init() {
  path_redirect_goto();
}

function path_redirect_goto($redirect = NULL) {
  if (!isset($redirect)) {
    $path = path_redirect_get_path();
    $language = $GLOBALS['language']->language;
    $query = path_redirect_get_query();
    $redirect = path_redirect_load_by_source($path, $language, $query);
  }
  elseif (is_numeric($redirect)) {
    $redirect = path_redirect_load($redirect);
  }

  if ($redirect) {
    // Create the absolute redirection URL.
    $redirect['redirect_url'] = url($redirect['redirect'], array('query' => $redirect['query'], 'fragment' => $redirect['fragment'], 'absolute' => TRUE));

    // Update the last used timestamp so that unused redirects can be purged.
    db_query("UPDATE {path_redirect} SET last_used = %d WHERE rid = %d", time(), $redirect['rid']);

    if (url($redirect['redirect']) == url($_GET['q'])) {
      // Prevent infinite loop redirection.
      watchdog('path_redirect', 'Redirect to <code>%redirect</code> is causing an infinite loop; redirect cancelled.', array('%redirect' => $redirect['redirect_url']), WATCHDOG_WARNING, l(t('Edit'), 'admin/build/path-redirect/edit/'. $redirect['rid']));
    }
    elseif (variable_get('path_redirect_allow_bypass', 0) && isset($_GET['redirect']) && $_GET['redirect'] === 'no') {
      // If the user has requested not to be redirected, show a message.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>.', array('@redirect' => $redirect['redirect_url'])));
    }
    elseif (variable_get('path_redirect_redirect_warning', 0)) {
      // Show a message and automatically redirect after 10 seconds.
      drupal_set_message(t('This page has been moved to <a href="@redirect">@redirect</a>. You will be automatically redirected in 10 seconds.', array('@redirect' => $redirect['redirect_url'])), 'error');
      drupal_set_html_head('<meta http-equiv="refresh" content="10;url=' . $redirect['redirect_url'] . '" />');
    }
    else {
      // Perform the redirect.
      unset($_REQUEST['destination']);
      drupal_goto($redirect['redirect_url'], NULL, NULL, $redirect['type']);
    }
  }

  // If this is being executed as a menu item, return a not found flag.
  return MENU_NOT_FOUND;
}

/**
 * Implement hook_cron().
 */
function path_redirect_cron() {
  // Purge inactive redirects from the database.
  if ($purge = variable_get('path_redirect_purge_inactive', 0)) {
    db_query("DELETE FROM {path_redirect} WHERE last_used < %d", time() - $purge);
    if ($count = db_affected_rows()) {
      watchdog('path_redirect', format_plural($count, 'Removed 1 inactive redirect from the database.', 'Removed @count inactive redirects from the database.'));
    }
  }
}

/**
 * Implement hook_path_redirect_operations().
 */
function path_redirect_path_redirect_operations() {
  $operations = array(
    'delete' => array(
      'action' => t('Delete'),
      'action_past' => t('Deleted'),
      'callback' => 'path_redirect_delete_multiple',
      'confirm' => TRUE,
    ),
  );
  return $operations;
}

/**
 * Implement hook_form_alter().
 *
 * Add a summary of redirects pointing to a node on its edit form.
 */
function path_redirect_form_alter(&$form, $form_state, $form_id) {
  if (substr($form_id, -10) == '_node_form' && !empty($form['#node']->nid)) {
    $redirect = array(
      'redirect' => 'node/' . $form['#node']->nid,
      'language' => $form['#node']->language,
    );
    $form['path_redirect'] = array(
      '#type' => 'fieldset',
      '#title' => t('URL redirects'),
      '#description' => t('The following are a list of URL redirects that point to this location.'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      '#access' => user_access('administer redirects'),
      '#weight' => 30,
    );
    module_load_include('inc', 'path_redirect', 'path_redirect.admin');
    $query = array('conditions' => array('redirect' => $redirect['redirect']));
    $form['path_redirect']['table'] = path_redirect_list_redirects($query);
    $form['path_redirect']['add'] = array(
      '#value' => path_redirect_local_actions($redirect),
    );
    if (module_exists('vertical_tabs')) {
      drupal_add_js(drupal_get_path('module', 'path_redirect') . '/path_redirect.js');
    }
  }
}

function path_redirect_local_actions($redirect = array()) {
  $links = array(
    'add' => array(
      'title' => $redirect ? t('Add redirect to this location') : t('Add redirect'),
      'href' => 'admin/build/path-redirect/add',
      'query' => drupal_get_destination() . ($redirect ? '&' . drupal_query_string_encode($redirect) : ''),
    ),
  );
  return theme('links', $links, array('class' => 'item-list action-links'));
}

/**
 * Implement hook_nodeapi().
 */
function path_redirect_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'presave':
      path_redirect_check_alias_changed('node/' . $node->nid, $node->path, $node->language);
      break;
    case 'delete':
      // When a node is deleted, also delete the redirects to it (they will result in a 404).
      path_redirect_delete_multiple(NULL, array('source' => 'node/'. $node->nid));
      path_redirect_delete_multiple(NULL, array('source' => 'node/'. $node->nid . '/%%'));
      break;
  }
}

/**
 * Creates a redirect if an URL alias is being changed.
 *
 * @param $path
 *   The base (normal) path.
 * @param $new_alias
 *   The new alias for the path.
 * @param $language
 *   The language of the alias being created.
 * @return
 *   TRUE if a redirect was created, or FALSE otherwise.
 */
function path_redirect_check_alias_changed($path, $new_alias, $language = '') {
  if (!variable_get('path_redirect_auto_redirect', 1) || empty($new_alias)) {
    return FALSE;
  }

  $old_alias = drupal_get_path_alias($path, $language);
  if ($old_alias != $base_path && $old_alias != $new_alias) {
    // If the user is manually changing the path alias, add a redirect from the old alias to the node.
    $redirect = array(
      'source' => $old_alias,
      'redirect' => $new_alias,
    );
    return path_redirect_save($redirect);
  }
}

/**
 * Implementation of hook_taxonomy().
 */
function path_redirect_taxonomy($op, $type, $array = NULL) {
  if ($op == 'delete' && $type == 'term') {
    // Delete any redirects to valid taxonomy paths.
    $term = (object) $array;
    $term->path = taxonomy_term_path($term);
    path_redirect_delete_multiple(NULL, array('source' => $term->path));
    if ($term->path != 'taxonomy/term/' . $term->tid) {
      path_redirect_delete_multiple(NULL, array('source' => 'taxonomy/term/' . $term->tid));
    }
  }
}

/**
 * Implementation of hook_user().
 */
function path_redirect_user($op, &$edit, &$account, $category = NULL) {
  if ($op == 'delete') {
    // Delete any redirects to valid user paths.
    path_redirect_delete_multiple(NULL, array('source' => 'user/'. $account->uid));
    path_redirect_delete_multiple(NULL, array('source' => 'user/'. $account->uid . '/%%'));
  }
}

/**
 * Validate a redirect's source path (from) field.
 */
function path_redirect_validate_source_field($element, &$form_state) {
  // Check that the path contains no URL fragment.
  if (strpos($element['#value'], '#') !== FALSE) {
    form_error($element, t('The source path cannot contain an URL fragment anchor.'));
  }

  //if (!valid_url($element['#value'])) {
  //  //Make sure "from" has the form of a local Drupal path
  //  form_serror($element, t('The source path does not appear valid. This must be a local Drupal path.'));
  //}

  // @todo Split into source and source_query here.

  // A redirect's 'from' cannot match any values from url_alias, it will cause an infinite loop.
  if ($pid = db_result(db_query("SELECT pid FROM {url_alias} WHERE dst = '%s'", $element['#value']))) {
    form_error($element, t('You cannot add an existing alias as a redirect as it will not work. You must <a href="@alias-delete">delete the alias</a> first.', array('@alias-delete' => url('admin/build/path/delete/' . $pid, array('query' => drupal_get_destination())))));
  }

  // Cannot create redirects for valid paths.
  $menu_item = menu_get_item($element['#value']);
  if ($menu_item && $menu_item['page_callback'] != 'path_redirect_goto') {
    form_error($element, t('The source path %path is a currently valid path. You cannot override existing paths. You can however, create URL aliases for them.', array('%path' => $element['#value'])));
  }

  return $element;
}

/**
 * Validate a redirect's redirect path (to) field.
 */
function path_redirect_validate_redirect_field($element, &$form_state) {
  // Split this field into path, query, and fragment.
  $parsed = parse_url($element['#value']) + array('query' => '', 'fragment' => '', 'path' => '');
  $form_state['values']['query'] = $parsed['query'];
  $form_state['values']['fragment'] = $parsed['fragment'];
  $form_state['values']['redirect'] = (isset($parsed['scheme']) ? $parsed['scheme'] . '://'. $parsed['host'] : '') . $parsed['path'];
  return $element;
}

/**
 * Validate a redirection.
 */
function path_redirect_validate_redirect($redirect, $form_parents = '') {
  if ($existing = path_redirect_load_by_source($redirect['source'], $redirect['language'])) {
    if ($redirect['rid'] != $existing['rid']) {
      // The "from" path should not conflict with another redirect
      form_set_error($form_parents . 'source', t('The source path %source is already being redirected. Do you want to <a href="@edit-page">edit the existing redirect</a>?', array('%source' => $redirect['source'], '@edit-page' => url('admin/build/path-redirect/edit/'. $existing['rid']))));
    }
  }

  if (!valid_url($redirect['redirect']) && !valid_url($redirect['redirect'], TRUE) && $redirect['redirect'] != '<front>') {
    form_set_error($form_parents . 'redirect', t('The redirect <strong>to</strong> path does not appear valid.'));
  }

  // check that there there are no redirect loops
  if (url($redirect['source']) == url($redirect['redirect'])) {
    form_set_error($form_parents . 'redirect', t('You are attempting to redirect the page to itself. This will result in an infinite loop.'));
  }
}

/**
 * Save an URL redirect to the database.
 */
function path_redirect_save($redirect) {
  // Merge default values.
  $redirect += array(
    'rid' => NULL,
    'query' => '',
    'fragment' => '',
    'language' => '',
    'type' => variable_get('path_redirect_default_status', 301),
    'last_used' => time(),
  );

  // Allow spaces in "from" path
  // @todo Move to validation?
  $redirect['source'] = str_replace('+', ' ', $redirect['source']);

  // Remove beginning and trailing slashes from path.
  // @todo Move to validation?
  $redirect['source'] = trim($redirect['source'], '\/?');

  path_redirect_refresh_redirects($redirect);

  if (empty($redirect['rid'])) {
    return drupal_write_record('path_redirect', $redirect);
  }
  else {
    return drupal_write_record('path_redirect', $redirect, array('rid'));
  }
}

/**
 * Load a redirect by ID.
 *
 * @param $rid
 *   An integer with the redirect ID.
 */
function path_redirect_load($rid) {
  $redirect = path_redirect_load_multiple(array($rid));
  return $redirect ? reset($redirect) : FALSE;
}

/**
 * Load a redirect by incoming path and language.
 *
 * @param $source
 *   The incoming path.
 * @param $language
 *   An optional language code. If not provided this will examine all language-
 *   neutral redirects.
 * @param $query
 *   An optional query string to match.
 */
function path_redirect_load_by_source($source, $language = '', $query = array()) {
  $where = $query ? "(source = '%s' OR source LIKE '%s')" : "source = '%s'";
  $args = ($query ? array($source, $source . '?%%') : array($source)) + array($language);
  $rid_query = db_query("SELECT rid FROM {path_redirect} WHERE $where AND language IN ('%s', '') ORDER BY language DESC, source DESC, rid DESC", $args);
  $rids = array();
  while ($rid = db_result($rid_query)) {
    $rids[] = $rid;
  }

  if ($query) {
    $redirects = path_redirect_load_multiple($rids);
    foreach ($redirects as $rid => $redirect) {
      if (path_redirect_compare_array($redirect['source_query'], $query)) {
        return $redirect;
      }
    }
  }
  elseif ($rids) {
    return path_redirect_load(current($rids));
  }

  return FALSE;
}

function path_redirect_load_multiple($rids = NULL, $conditions = array()) {
  if (isset($rids) && empty($rids)) {
    return array();
  }

  $args = _path_redirect_build_conditions($rids, $conditions);
  $sql = "SELECT * FROM {path_redirect} WHERE " . implode(' AND ', $conditions);
  $query = db_query($sql, $args);

  $redirects = array();
  while ($redirect = db_fetch_array($query)) {
    $redirects[$redirect['rid']] = $redirect;
  }
  $redirects = array_map('path_redirect_post_load_redirect', $redirects);
  return $redirects;
}

function _path_redirect_build_conditions($rids, &$conditions, $args = array()) {
  static $schema;
  if (!isset($schema)) {
    $schema = drupal_get_schema('path_redirect');
  }

  if ($rids) {
    $conditions += array('rid' => array());
    $conditions['rid'] = array_merge($rids, (array) $conditions['rid']);
  }
  if ($conditions) {
    foreach ($conditions as $field => $value) {
      if (!is_string($field) || !isset($schema['fields'][$field])) {
        continue;
      }
      //if ($field == 'langauge' && !is_array($value)) {
      //  $value = array($value, '');
      //}
      $type = $schema['fields'][$field]['type'];
      if (is_array($value)) {
        $conditions[$field] = "$field IN (" . db_placeholders($value, $type) . ')';
        $args = array_merge($args, $value);
      }
      else {
        $conditions[$field] = "$field = " . dB_type_placeholder($type);
        $args[] = $value;
      }
    }
  }

  return $args;
}

function path_redirect_post_load_redirect(array &$redirect) {
  if (!isset($redirect['source_query']) || !is_array($redirect['source_query'])) {
    $parsed = parse_url($redirect['source']) + array('query' => '');
    $redirect['source_query'] = path_redirect_get_query_array($parsed['query']);
    $redirect['source'] = $parsed['path'];
  }
  $redirect['query'] = path_redirect_get_query_array($redirect['query']);
  return $redirect;
}

function path_redirect_refresh_redirects($redirect = NULL) {
  //if (variable_get('path_redirect_menu_router', 1)) {
  //  variable_set('menu_rebuild_needed', TRUE);
  //}

  //if (isset($redirect)) {
  //  if (is_string($redirect)) {
  //    cache_clear_all('%%' . $path, 'cache_page', TRUE);
  //  }
  //  elseif (is_array($redirect)) {
  //    cache_clear_all(url($redirect['source'], array('absolute' => TRUE, 'language' => $redirect['language'])), 'cache_page', TRUE);
  //  }
  //}
}

/**
 * Delete a redirect.
 *
 * @param $redirect
 *   An array with the redirect data.
 */
function path_redirect_delete($rid, $deprecated = FALSE) {
  // @todo Remove legacy path_redirect_delete support for pathauto.
  if (is_string($rid) && is_string($deprecated)) {
    return path_redirect_delete_multiple(NULL, array('source' => $rid, 'redirect' => $deprecated));
  }
  elseif (is_array($rid) && !isset($rid['rid'])) {
    $rid = $rid['rid'];
  }

  return path_redirect_delete_multiple(array($rid));
}

function path_redirect_delete_multiple($rids = NULL, $conditions = array()) {
  $args = _path_redirect_build_conditions($rids, $conditions);
  $sql = 'DELETE FROM {path_redirect} WHERE ' . implode(' AND ', $conditions);
  db_query($sql, $args);
  $deleted = db_affected_rows();
  if ($deleted) {
    path_redirect_refresh_redirects();
  }
  return $deleted;
}

function path_redirect_get_path($path = NULL) {
  if (!isset($path)) {
    if (drupal_is_front_page()) {
      $path = '<front>';
    }
    else {
      $path = $_GET['q'];
    }
  }
  else {
    if ($path == drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
      $path = '<front>';
    }
  }
  return $path;
}

function path_redirect_get_query($query = NULL) {
  if (!isset($query)) {
    $query = $_GET;
  }
  unset($query['q']);
  return $query;
}

function path_redirect_build_url($path, $query = '', $fragment = '', $clean_url = NULL) {
  if (!isset($clean_url)) {
    $clean_url = variable_get('clean_url', 0);
  }

  $url = $path;
  if ($query) {
    $url .= $clean_url ? '?' : '&';
    if (is_array($query)) {
      $url .= drupal_query_string_encode($query);
    }
    else {
      $url .= $query;
    }
  }
  if ($fragment) {
    $url .= '#' . $fragment;
  }
  return $url;
}

/**
 * Compare tha all values and associations in one array match another array.
 *
 * We cannot use array_diff_assoc() here because we need to be recursive.
 *
 * @param $match
 *   The array that has the values.
 * @param $haystack
 *   The array that will be searched for values.
 */
function path_redirect_compare_array($match, $haystack) {
  foreach ($match as $key => $value) {
    if (!array_key_exists($key, $haystack)) {
      return FALSE;
    }
    elseif (is_array($value)) {
      if (!is_array($haystack[$key])) {
        return FALSE;
      }
      elseif (!path_redirect_compare_array($value, $haystack[$key])) {
        return FALSE;
      }
    }
    elseif ($value != $haystack[$key]) {
      return FALSE;
    }
  }
  return TRUE;
}

/**
 * Split an URL-encoded query string into an array.
 *
 * @param $query
 *   The query string to split.
 *
 * @return
 *   An array of url decoded couples $param_name => $value.
 */
function path_redirect_get_query_array($query) {
  $result = array();
  if (!empty($query)) {
    foreach (explode('&', $query) as $param) {
      $param = explode('=', $param);
      $result[$param[0]] = isset($param[1]) ? rawurldecode($param[1]) : '';
    }
  }
  return $result;
}

function path_redirect_variables() {
  return array(
    'path_redirect_redirect_warning' => 0,
    'path_redirect_allow_bypass' => 0,
    'path_redirect_auto_redirect' => 1,
    'path_redirect_purge_inactive' => 0,
    'path_redirect_default_status' => 301,
    'path_redirect_nodeapi_enabled' => NULL,
  );
}
